---
- include_tasks: is_systemd.yml

# Variable configuration.
- include_tasks: variables.yml

# Setup/install tasks.
- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: initialize.yml
- include_tasks: configure.yml

- name: Ensure PostgreSQL is final state and enabled on boot.
  systemd:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_final_state }}"
    enabled: "{{ postgresql_service_enabled }}"
  when: systemd_pid_1 is defined and systemd_pid_1

- name: Start Postgresql for configuration
  systemd:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_service_state }}"
  when: systemd_pid_1 is defined and systemd_pid_1
  changed_when: false

- name: Is PostgreSQL in background mode
  become: true
  become_user: "{{ postgresql_user }}"
  command: "{{ postgresql_bin_path }}/pg_ctl status -D {{ postgresql_config_path }}"
  register: pg_ctlout
  when: systemd_pid_1 is not defined
  failed_when: false
  changed_when: false

- name: Start PostgreSQL in background mode
  become: true
  become_user: "{{ postgresql_user }}"
  command: "{{ postgresql_bin_path }}/pg_ctl -t 1800 -w start -D {{ postgresql_config_path }}"
  changed_when: false
  when:
    - systemd_pid_1 is not defined
    - pg_ctlout.stdout.find('server is running') == -1

# Configure PostgreSQL.
- import_tasks: users.yml
- import_tasks: databases.yml

- name: Force a restart if configuration has changed.
  meta: flush_handlers

- name: final postgresql state
  become: true
  become_user: "{{ postgresql_user }}"
  command: "{{ postgresql_bin_path }}/pg_ctl -t 180 -w {{ postgresql_final_state }} -D {{ postgresql_config_path }}"
  when: systemd_pid_1 is not defined

- name: Set toe service in final state after config, ignore changes
  systemd:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_final_state }}"
    enabled: "{{ postgresql_service_enabled }}"
  when: systemd_pid_1 is defined and systemd_pid_1
  changed_when: false
